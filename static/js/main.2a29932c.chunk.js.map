{"version":3,"sources":["reportWebVitals.js","components/counter.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Counter","state","num1","setRandomValue","num2","response","score","rainbow","colors","Math","floor","random","length","formatedQuestion","storeAnswer","event","setState","target","value","matchAnswer","keyCode","parseInt","this","className","style","textAlign","fontSize","width","height","border","type","onChange","onKeyUp","placeholder","ceil","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCyDCQ,E,4MA5DXC,MAAM,CACFC,KAAM,EAAKC,iBACXC,KAAM,EAAKD,iBACXE,SAAU,GACVC,MAAO,G,EAqBXC,QAAQ,WACJ,IAAIC,EAAO,CAAC,QAAS,SAAU,UAAW,UAAW,QAErD,MADU,QACGA,EAAOC,KAAKC,MAAMD,KAAKE,SAASH,EAAOI,U,EAGxDC,iBAAiB,WAAK,IAAD,EACA,EAAKZ,MACtB,OAFiB,EACZC,KACO,MAFK,EACNE,M,EAIfU,YAAY,SAACC,GACT,EAAKC,SAAS,CACVX,SAAUU,EAAME,OAAOC,S,EAQ/BC,YAAY,SAACJ,GAAS,IAAD,EACO,EAAKd,MAAxBK,EADY,EACZA,MAAOJ,EADK,EACLA,KAAME,EADD,EACCA,KACC,KAAhBW,EAAMK,SACL,EAAKJ,SAAS,CACVV,MAAQJ,EAAKE,IAAQiB,SAASN,EAAME,OAAOC,OAAOZ,EAAM,EAAEA,EAAM,EAAEA,EAAM,EAAE,EAC1EJ,KAAM,EAAKC,iBACXC,KAAM,EAAKD,iBACXE,SAAS,M,4CA9CzB,WAAU,IAAD,OACL,OAAGiB,KAAKrB,MAAMK,MAAM,GAEZ,oBAAIiB,UAAWD,KAAKf,UAAWiB,MAAO,CAACC,UAAW,SAAUC,SAAU,SAAtE,qBAIA,sBAAKH,UAAU,uEAAuEC,MAAO,CAACG,MAAO,OAAQC,OAAQ,SAArH,UACI,qBAAIJ,MAAO,CAACE,SAAU,QAAtB,uBAAyC,sBAAMH,UAAU,eAAhB,SAAgCD,KAAKrB,MAAMK,WACpF,sBAAKiB,UAAU,eAAeC,MAAO,CAACK,OAAQ,QAA9C,UACI,oBAAIN,UAAWD,KAAKf,UAAWiB,MAAO,CAACC,UAAW,SAAUC,SAAU,SAAtE,SAAiFJ,KAAKT,qBACtF,uBAAOiB,KAAK,OAAOP,UAAU,eAAeQ,SAAU,SAAChB,GAAD,OAAS,EAAKD,YAAYC,IAAQiB,QAAS,SAACjB,GAAD,OAAS,EAAKI,YAAYJ,IAAQkB,YAAY,SAASf,MAAOI,KAAKrB,MAAMI,mB,4BAwB1L,WACI,OAAOI,KAAKyB,KAAmB,GAAdzB,KAAKE,c,GA7CRwB,aCMtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1BjD,M","file":"static/js/main.2a29932c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  \n    state={\n        num1: this.setRandomValue(),\n        num2: this.setRandomValue(),\n        response: '',\n        score: 0\n    };\n\nrender() {\n    if(this.state.score>10){\n        return(\n            <h1 className={this.rainbow()} style={{textAlign: 'center', fontSize: '10rem'}}>You Won</h1>\n        )\n    }else{\n        return (\n            <div className=\"d-flex flex-column justify-content-center align-items-center bg-info\" style={{width: '100%', height: '100vh'}}>\n                <h1 style={{fontSize: '5rem'}}>Solve it! <span className=\"text-warning\">{this.state.score}</span></h1>\n                <div className=\"card bg-info\" style={{border: 'none'}}>\n                    <h1 className={this.rainbow()} style={{textAlign: 'center', fontSize: '10rem'}}>{this.formatedQuestion()}</h1>\n                    <input type=\"text\" className=\"form-control\" onChange={(event)=>this.storeAnswer(event)} onKeyUp={(event)=>this.matchAnswer(event)} placeholder=\"Answer\" value={this.state.response}/>\n                </div>\n            </div>\n        ); \n    }\n    }\n\n    rainbow=()=>{\n        let colors=['light', 'danger', 'warning', 'primary', 'dark'];\n        let color=\"text-\";\n        return color+colors[Math.floor(Math.random()*colors.length)];\n    }\n\n    formatedQuestion=()=>{\n        let {num1, num2}=this.state;\n        return num1+' + '+num2;\n    }\n\n    storeAnswer=(event)=>{\n        this.setState({\n            response: event.target.value\n        })\n    }\n\n    setRandomValue(){\n        return Math.ceil(Math.random()*10);\n    }\n\n    matchAnswer=(event)=>{\n        let {score, num1, num2}=this.state;\n        if(event.keyCode===13){\n            this.setState({\n                score: (num1+num2)===parseInt(event.target.value)?score+1:score>0?score-1:0,\n                num1: this.setRandomValue(),\n                num2: this.setRandomValue(),\n                response:'' \n            })\n        }\n    }\n\n}\n\nexport default Counter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Counter from './components/counter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}